name: build and deploy app

on:
  push:
    branches: [ "main" ]

jobs:
  Build:
    env:
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}
        
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v3
      - name: install python
        uses: actions/setup-python@v4
        with:
            python-version: 3.10.4
      - name: update pip
        run: python -m pip install --upgrade pip
      - name: install dependencies
        run: pip install -r requirements.txt  
      - name: run tests
        run: |
          pip install pytest
          cd app
          pytest --pyargs tests   

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_HUB_USERNAME}}
          password: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}
      - name: set up docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: check directory
        run: pwd
      - name: build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./app/Dockerfile
          builder: ${{steps.buildx.outputs.name}}
          push: true
          tags: ${{secrets.DOCKER_HUB_USERNAME}}/book-api:latest
          cache-from: type=registry, ref=${{secrets.DOCKER_HUB_USERNAME}}/book-api:buildcache
          cache-to: type=registry, ref=${{secrets.DOCKER_HUB_USERNAME}}/book-api:buildache,mode=max
  Deploy:
    runs-on: ubuntu-latest
    needs: [Build]
    steps:
      - name: Deploy to Ubuntu Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.SERVER_HOST}}
          username: ${{secrets.SERVER_USERNAME}}
          password: ${{secrets.SERVER_PASSWORD}}
          script: |
            cd app/src
            git pull
            echo ${{secrets.SERVER_PASSWORD}} | sudo -S systemctl restart api

      


